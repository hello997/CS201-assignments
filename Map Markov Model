import java.util.*;

public class MapMarkovModel extends AbstractModel {

	@Override
	public void initialize(Scanner s) {
		double start = System.currentTimeMillis();
        int count = readChars(s);
        double end = System.currentTimeMillis();
        double time = (end - start) / 1000.0;
        super.messageViews("#read: " + count + " chars in: " + time + " secs");
	}

	@Override
	public void process(Object o) {
		 String temp = (String) o;
	     String[] nums = temp.split("\\s+");
	     int k = Integer.parseInt(nums[0]);
	     int numLetters = DEFAULT_COUNT;
	     if (nums.length > 1) {
	         numLetters = Integer.parseInt(nums[1]);
	     }
	        
	     double stime = System.currentTimeMillis();
	     String text = makeNGram(k, numLetters);
	     double etime = System.currentTimeMillis();
	     double time = (etime - stime) / 1000.0;
	     this.messageViews("time to generate: " + time);
	     this.notifyViews(text);
	}
	
	protected String myString;
	protected Random myRandom;
    public static int RANDOM_SEED = 1234; 
	public static final int DEFAULT_COUNT = 1600;
    Map<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();
    
    public MapMarkovModel() {
        myRandom = new Random(RANDOM_SEED);
    }
    
    /**
     * Read characters from entire file into myString
     * @param s non-null Scanner at the beginning of a file
     * @return number of characters read
     */
    protected int readChars(Scanner s) {
        myString = s.useDelimiter("\\Z").next();
        s.close();
        return myString.length();
    }
    
	public void fillMap(int k){ 
		String wrapAroundString = myString + myString.substring(0,k);
		for (int i=0; i<wrapAroundString.length()-k; i++){
			String key = wrapAroundString.substring(i,i+k);
			String value = wrapAroundString.substring(i+1, i+k+1);
			ArrayList<String> values = map.get(key);
			if (values==null){
				values = new ArrayList<String>();
				map.put(key, values);
			}
			values.add(value);
		}
	}
	
	public String makeNGram(int k, int count){
		if (map.isEmpty()){
			fillMap(k);
		}
		String random = "";
		int start = myRandom.nextInt(myString.length()+1);
		String seed = myString.substring(start, start+k);
		String next = "";
		for (int i=0; i<count; i++){
			next = map.get(seed).get(myRandom.nextInt(map.get(seed).size())); //going into array for seed to find next
			random = random + next.substring(k-1,k); //attaching last character of next to generated string
			seed = next;
		}
		return random;
	}

}
