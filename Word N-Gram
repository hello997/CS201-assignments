/*
 * This class encapsulates N words/strings so that the
 * group of N words can be treated as a key in a map or an
 * element in a set, or an item to be searched for in an array.
 * <P>
 * @author Olivia Zhu
 */

public class WordNgram implements Comparable<WordNgram>{
    
    protected String[] myWords;
    
    /*
     * Store the n words that begin at index start of array list as
     * the N words of this N-gram.
     * @param list contains at least n words beginning at index start
     * @start is the first of the N words to be stored in this N-gram
     * @n is the number of words to be stored (the n in this N-gram)
     */
    public WordNgram(String[] list, int start, int n) {
        myWords = new String[n-start];
        for (int i=start; i<n; i++){
        	myWords[i-start]=list[i];
        }
        
    }

    public String[] getMyWords(){
    	return myWords;
    }
    
    /**
     * Return value that meets criteria of compareTo conventions.
     * @param wg is the WordNgram to which this is compared
     * @return appropriate value less than zero, zero, or greater than zero
     */
    public int compareTo(WordNgram wg) { //implements comparable, so should be inherent
        String[] words1 = this.getMyWords();
        String[] words2 = wg.getMyWords();
        if (words1.length-words2.length!=0){
        	return words1.length-words2.length;
        }
        else{
            int difference = 0;
        	for (int i=0; i<words1.length; i++){
        		if (!words1[i].equals(words2[i])){
        			difference = 1;
        			return words1[i].compareTo(words2[i]);
        		}
        	}
        	return difference;
        }
    }
    
    /**
     * Return true if this N-gram is the same as the parameter: all words the same.
     * @param o is the WordNgram to which this one is compared
     * @return true if o is equal to this N-gram
     */
    public boolean equals(Object o) { 
        WordNgram wg = (WordNgram) o;
        if (this.compareTo(wg) == 0){
        	return true;
        }
        else{
        	return false;
        }
    }
    
    /**
     * Returns a good value for this N-gram to be used in hashing.
     * @return value constructed from all N words in this N-gram
     */
    public int hashCode() {
    	int sum = 0;
    	int prime = 151;
    	for (String word: myWords){
    		sum += word.hashCode()+prime;
    		prime += 6;
    	}
        return sum;
    	//return 15;
    }
    
    public String getString(int n){
    	return this.myWords[n];
    }
    
    public void print(){
    	for (String i: this.myWords){
    		System.out.print("SEED"+ i + " ");
    	}
    }

}
