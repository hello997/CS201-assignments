import java.util.*;

public class WordMarkovModel extends AbstractModel{
	@Override
	public void initialize(Scanner s) {
		double start = System.currentTimeMillis();
        int count = readChars(s);
        double end = System.currentTimeMillis();
        double time = (end - start) / 1000.0;
        super.messageViews("#read: " + count + " chars in: " + time + " secs");
	}

	@Override
	public void process(Object o) {
		 String temp = (String) o;
	     String[] nums = temp.split("\\s+");
	     int k = Integer.parseInt(nums[0]);
	     int numLetters = DEFAULT_COUNT;
	     if (nums.length > 1) {
	         numLetters = Integer.parseInt(nums[1]);
	     }
	        
	     double stime = System.currentTimeMillis();
	     String text = makeNGram(k, numLetters); 
	     double etime = System.currentTimeMillis();
	     double time = (etime - stime) / 1000.0;
	     this.messageViews("time to generate: " + time);
	     this.notifyViews(text);
	}
	
	protected String myString;
	protected String[] words;
	protected Random myRandom;
    public static int RANDOM_SEED = 1234; 
	public static final int DEFAULT_COUNT = 100;
    Map<WordNgram, ArrayList<WordNgram>> map = new TreeMap<WordNgram, ArrayList<WordNgram>>();
    
    public WordMarkovModel() {
        myRandom = new Random(RANDOM_SEED);
    }
    
    /**
     * Read characters from entire file into myString
     * @param s non-null Scanner at the beginning of a file
     * @return number of characters read
     */
    protected int readChars(Scanner s) { //actually reading words
        myString = s.useDelimiter("\\Z").next();
        s.close();
        return myString.length();
    }
    
	public void fillMap(int k){ //helper function to create map of WordNgrams
		String[] word = myString.split("\\s+");
		words = new String[word.length+k];
		for (int a=0; a<word.length; a++){
			words[a]=word[a];
		}
		for (int b=word.length; b<word.length+k; b++){ //this for loop wraps around array to k
			words[b]=word[b-word.length];
		}

		WordNgram key = new WordNgram(words, 0, k);
		WordNgram value = new WordNgram(words, 1, k);
		ArrayList<WordNgram> values = new ArrayList<WordNgram>();
		int keynumber=0;
		for (int i=0; i<words.length-k; i++){
			key = new WordNgram(words, i, i+k);
			keynumber++;
			value = new WordNgram(words,i+1,i+k+1);
		
			if (map.containsKey(key)){
				values = map.get(key);
			}
			else{
				values = new ArrayList<WordNgram>();
				map.put(key, values);
			}
			values.add(value);
		}
		System.out.println("keynumber"+keynumber);
	}
	
	public String makeNGram(int k, int count){
		fillMap(k);
		String random = "";
		int start = myRandom.nextInt(words.length);
		WordNgram seed = new WordNgram(words,start,start+k);
		WordNgram next;
		ArrayList<WordNgram> tempValue = new ArrayList<WordNgram>();
		for (int i=0; i<count; i++){
			if (map.containsKey(seed)){
				tempValue = map.get(seed);
			}
			else{
				System.out.println("AHHH");
			}
			int index = myRandom.nextInt(tempValue.size());
			next = tempValue.get(index); //going into array for seed to find next
			random = random + next.getString(k-1); //attaching last character of next to generated string
			seed = next;
		}
		return random;
	}

}
